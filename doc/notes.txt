***** DESCRIPTION *****
This is a general files that contain thought ideas about the project.
Of course it will be updated numerous times.

game designs assumes only one server in local network and single client per MAC
address.
If these conditions are not met, application behaviour is undefined.


***** MOTION *****
This is a multiplayer game with max number of players - 4
Note that motion of each racket is circular, so we can simply update racket degree for each player.
ball might use both polar and decartes coordinates.
we need to test and decide which one to use

Each player can make 3 types of moves:
1. press key left - moves the racket left
2. press key right - moves the racket right
3. press key down - stops racket move

This will allow us to easier render the image on client side.
Each key pressed will change the angle of the racket to some defined number (11 or 15 degrees eg)
This number will be defined after testing and checking game performance.

***** THREADS *****
we will use separate threads to read keyboard input and render the image.
separate threads are also planned to for send() and rcv() packet
send() and rcv() are planned to be implemented in C at the moment

***** LIBRARIES *****
At the moment, we plan to use pygame as main library to draw image.
https://www.pygame.org

Additionally we plan to use libpcap to get default device to send/receive on.
This will allow us not to indicate device with char array and as a result will provice
compatibilty with different Linux systems (as different Linux systems have different names 
of default ethernet device)

***** ETHERNET TYPE *****
we plan to use defined ethernet types in attempt to capture only packets with certain type.
this is done in order to process only packets that are generated by server or any of the clients.
Here is how they are defined at the moment:

// func.h
#define ETHER_TYPE_PACKET 0x5555
number is chosen arbitrarily.  we have not yet checked whether 0x5555 is already
in use by some standard protocol, but first investigation of headers showed that it is no used.
We believe that even if this number is used, there is little chance that issues will arise 
on a local network.

***** MAC ADDRESSES *****
we plan to store mac addresses of each client on the server and write proper destination into each 
packet and not use broadcats address. This is good idea in general, however I think that broadcast address can 
simplofy a lot. We have to test and decide later what to do here.

***** SERVER *****
So far we concluded that both server and clients will be written in python and 
use API written in C to communicate over network

***** CLIENTS *****
As mentioned above, clients will be written in python and use netwokr API
for communication.
Main purpose of clients is to update the game state.

***** JUST NOTES *****
below you will find all the different notes/ideas. They do not necessarily have any meaning at the moment

def send():                        
	thread_send(data)
	/* call C send() */              

def recv():                        
	thread_recv(data)
	/* call C recv() */              

def print_field():

def print_player():
                                   

int send(data)
{
	net_fd = get_net_fd();
	send(data, net_fd);
}

int recv(&data)
{
	net_fd = get_net_fd();
	recv(&data, net_fd);
}

1. How to get current host MAC_ADDRESS ?
the only option now is with socket()

2. Is it proper to use packet type id to spec packet purpose?
#define ETHERTYPE_DISCOVER 0x0001
#define ETHERTYPE_GAME 0x0002

we put it here:
|src|dest|__ETHER_TYPE__|..._payload..._|
